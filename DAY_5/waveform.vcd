$date
	Thu Apr 27 14:22:13 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module RCA_TB $end
$var wire 1 ! cout $end
$var wire 4 " s [3:0] $end
$var reg 4 # a [3:0] $end
$var reg 4 $ b [3:0] $end
$var reg 1 % cin $end
$scope module DUT $end
$var wire 4 & a [3:0] $end
$var wire 4 ' b [3:0] $end
$var wire 3 ( c [2:0] $end
$var wire 1 ) cin $end
$var wire 1 ! cout $end
$var wire 4 * s [3:0] $end
$scope module adder1 $end
$var wire 1 + a $end
$var wire 1 , b $end
$var wire 1 ) c $end
$var wire 1 - cout $end
$var wire 1 . s $end
$upscope $end
$scope module adder2 $end
$var wire 1 / a $end
$var wire 1 0 b $end
$var wire 1 1 c $end
$var wire 1 2 cout $end
$var wire 1 3 s $end
$upscope $end
$scope module adder3 $end
$var wire 1 4 a $end
$var wire 1 5 b $end
$var wire 1 6 c $end
$var wire 1 7 cout $end
$var wire 1 8 s $end
$upscope $end
$scope module adder4 $end
$var wire 1 9 a $end
$var wire 1 : b $end
$var wire 1 ; c $end
$var wire 1 ! cout $end
$var wire 1 < s $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0<
0;
0:
09
18
07
06
15
04
03
02
01
00
0/
1.
0-
0,
1+
b101 *
0)
b0 (
b100 '
b1 &
0%
b100 $
b1 #
b101 "
0!
$end
#100000
16
12
11
18
1<
03
1-
b11 (
1.
b1101 "
b1101 *
1,
05
1:
1/
1%
1)
b1001 $
b1001 '
b11 #
b11 &
#200000
0;
01
07
06
1!
0-
18
03
02
b0 (
0<
1.
b101 "
b101 *
0,
15
0/
19
0%
0)
b1100 $
b1100 '
b1001 #
b1001 &
#300000
1<
16
1;
13
12
17
11
18
1-
b111 (
1.
b1111 "
b1111 *
1,
10
1/
14
1%
1)
b1111 $
b1111 '
b1111 #
b1111 &
#400000
